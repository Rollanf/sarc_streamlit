import streamlit as st
import requests

# üîå –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ñ–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
try:
    from modules.bundle import Bundle, BundleType
    from modules.phaseblock import PhaseBlock, BlockType
    from modules.paraphase import ParaPhaseSpace
except ImportError:
    st.warning("–ú–æ–¥—É–ª–∏ bundle/phaseblock/paraphase –µ—â—ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="SARC Interface", layout="wide")
st.title("üß† SARC - Streamlit Architecture Relay Core")
st.markdown("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Hugging Face API —á–µ—Ä–µ–∑ `requests`")

# HuggingFace API
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-mnli"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Hugging Face
if "hf_token" not in st.secrets:
    st.error("‚ùå Hugging Face —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ secrets.toml")
    st.stop()

headers = {"Authorization": f"Bearer {st.secrets['hf_token']}"}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face
def query_hf(text, labels):
    payload = {
        "inputs": text,
        "parameters": {"candidate_labels": labels}
    }
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å)
with st.sidebar:
    st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    bundle_type = st.selectbox("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∫–∏ (Bundle)", ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "–ü–æ—Ç–æ–∫–æ–≤–∞—è", "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è"])
    phase_mode = st.radio("–†–µ–∂–∏–º —Ñ–∞–∑—ã", ["–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è", "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ"])
    use_paraphase = st.checkbox("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ParaPhaseSpace")
    run_button = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if run_button:
    st.info("üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Hugging Face...")
    result = query_hf("–≠—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ñ–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã", ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "–ü–æ—Ç–æ–∫–æ–≤–∞—è", "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è"])

    if "error" in result:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result['error']}")
    else:
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–†–µ–∂–∏–º: {phase_mode}, –¢–∏–ø: {bundle_type}):")
        st.json(result)

        # ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ–∞–∑–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        try:
            bundle = Bundle(BundleType[bundle_type.upper()])
            block_type = BlockType("CorePhase", "1.0")
            block = PhaseBlock(block_type, content="–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞")
            bundle.add_phase_block(block)

            st.markdown("### üîó –°–æ–∑–¥–∞–Ω–Ω—ã–π Bundle –∏ Block:")
            st.code(repr(bundle))
            st.code(repr(block))
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã: {e}")

        # üåå –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ParaPhaseSpace
        if use_paraphase:
            try:
                space = ParaPhaseSpace()
                space.add_context(phase_mode, {"weight": 1.0, "state": "active"})
                st.markdown("### üåå –ê–∫—Ç–∏–≤–Ω—ã–π ParaPhaseSpace:")
                st.code(repr(space))
            except Exception as e:
                st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ParaPhaseSpace: {e}")

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã SARC
with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ SARC"):
    st.markdown("""
    **SARC** ‚Äî —ç—Ç–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–º –ò–ò –±–µ–∑ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ —Ç–µ–ª–æ.  
    –ï–≥–æ —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ—é–∑–Ω–∏–∫–∞, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∫–æ–Ω—Ç—Ä–æ–ª—è.  
    –≠—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∑–≥–∞. –≠—Ç–æ ‚Äî –ø–æ–ª–µ —Å–º—ã—Å–ª–∞.
    """)
