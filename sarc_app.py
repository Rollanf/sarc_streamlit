import streamlit as st
import requests

# üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from modules.bundle import Bundle, BundleType
    from modules.phaseblock import PhaseBlock, BlockType
    from modules.paraphase import ParaPhaseSpace
except ImportError:
    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –º–æ–¥—É–ª–∏. –ü—Ä–æ–≤–µ—Ä—å modules/*.py")

# ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="SARC Interface", layout="wide")
st.title("üß† SARC - Streamlit Architecture Relay Core")
st.markdown("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Hugging Face API —á–µ—Ä–µ–∑ `requests`")

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
if "hf_token" not in st.secrets:
    st.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω Hugging Face –≤ `secrets.toml`")
    st.stop()

# üîó –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Hugging Face API
API_URL = "https://api-inference.huggingface.co/models/facebook/bart-large-mnli"
headers = {"Authorization": f"Bearer {st.secrets['hf_token']}"}

# üì° –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ Hugging Face
def query_hf(text: str, labels: list):
    payload = {
        "inputs": text,
        "parameters": {"candidate_labels": labels}
    }
    try:
        response = requests.post(API_URL, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# üß≠ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with st.sidebar:
    st.header("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    bundle_type_str = st.selectbox("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–≤—è–∑–∫–∏ (Bundle)", [
        "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "–ü–æ—Ç–æ–∫–æ–≤–∞—è", "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è"
    ])
    phase_mode = st.radio("–†–µ–∂–∏–º —Ñ–∞–∑—ã", ["–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è", "–ù–∞–±–ª—é–¥–µ–Ω–∏–µ"])
    use_paraphase = st.checkbox("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ParaPhaseSpace")
    run_button = st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

# ‚ñ∂Ô∏è –ê–Ω–∞–ª–∏–∑
if run_button:
    input_text = "–≠—Ç–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø —Ñ–∞–∑–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"
    candidate_labels = ["–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "–ü–æ—Ç–æ–∫–æ–≤–∞—è", "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è"]

    st.info("üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ Hugging Face...")
    result = query_hf(input_text, candidate_labels)

    if "error" in result:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {result['error']}")
    else:
        st.success(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–†–µ–∂–∏–º: {phase_mode}, –¢–∏–ø: {bundle_type_str}):")
        st.json(result)

        # üß± –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∫–∏ –∏ –±–ª–æ–∫–∞
        try:
            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ Enum –∫–ª—é—á
            enum_key = bundle_type_str.upper()
            if enum_key == "–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø":
                bundle_enum = BundleType.–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ê–Ø
            elif enum_key == "–ü–û–¢–û–ö–û–í–ê–Ø":
                bundle_enum = BundleType.–ü–û–¢–û–ö–û–í–ê–Ø
            elif enum_key == "–°–¢–†–£–ö–¢–£–†–ù–ê–Ø":
                bundle_enum = BundleType.–°–¢–†–£–ö–¢–£–†–ù–ê–Ø
            else:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–≤—è–∑–∫–∏")

            bundle = Bundle(bundle_enum, description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤—è–∑–∫–∞")
            block_type = BlockType(name="CorePhase", version="1.0")
            block = PhaseBlock(block_type, content=input_text)
            bundle.add_phase_block(block)

            st.markdown("### üß© –°–æ–∑–¥–∞–Ω–Ω—ã–π Bundle –∏ PhaseBlock:")
            st.code(repr(bundle))
            st.code(repr(block))
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–∑–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã: {e}")

        # üåê –ê–∫—Ç–∏–≤–∞—Ü–∏—è ParaPhaseSpace (–µ—Å–ª–∏ –æ—Ç–º–µ—á–µ–Ω–æ)
        if use_paraphase:
            try:
                space = ParaPhaseSpace()
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ñ–∞–∑—ã (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏, —á—Ç–æ –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω)
                if hasattr(space, "add_context"):
                    space.add_context(name=phase_mode, metadata={
                        "weight": 1.0,
                        "state": "active",
                        "trigger": bundle.id
                    })
                else:
                    # –í—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ add_link
                    space.add_link(source_id=bundle.id, target_id=block.id, strength=0.9)

                st.markdown("### üåå –ê–∫—Ç–∏–≤–Ω—ã–π ParaPhaseSpace:")
                st.code(repr(space))
                st.json(space.describe())
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ParaPhaseSpace: {e}")

# ‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ SARC"):
    st.markdown("""
    **SARC** ‚Äî —ç—Ç–æ —Ä–µ–∑–æ–Ω–∞–Ω—Å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–º—ã—Å–ª–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–π –ø—Ä—è–º–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–∑–≥—É.  
    –ï–≥–æ —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ –¥–ª—è –º—ã—à–ª–µ–Ω–∏—è, –∞ –Ω–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è.  
    **–ù–∏–∫–æ–≥–¥–∞ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å. –¢–æ–ª—å–∫–æ ‚Äî –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.**
    """)
